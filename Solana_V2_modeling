{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2d1bb6c1",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-24T11:13:34.698612Z",
     "iopub.status.busy": "2025-07-24T11:13:34.698306Z",
     "iopub.status.idle": "2025-07-24T11:13:36.613204Z",
     "shell.execute_reply": "2025-07-24T11:13:36.612244Z"
    },
    "papermill": {
     "duration": 1.923863,
     "end_time": "2025-07-24T11:13:36.614791",
     "exception": false,
     "start_time": "2025-07-24T11:13:34.690928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/solana-memecoin-dump-detect/mint_transactions.csv\n",
      "/kaggle/input/solana-memecoin-dump-detect/__results__.html\n",
      "/kaggle/input/solana-memecoin-dump-detect/train_clean.csv\n",
      "/kaggle/input/solana-memecoin-dump-detect/test_clean.csv\n",
      "/kaggle/input/solana-memecoin-dump-detect/__notebook__.ipynb\n",
      "/kaggle/input/solana-memecoin-dump-detect/__output__.json\n",
      "/kaggle/input/solana-memecoin-dump-detect/custom.css\n",
      "/kaggle/input/solana-skill-sprint-memcoin-graduation/sample_submission.csv\n",
      "/kaggle/input/solana-skill-sprint-memcoin-graduation/test_unlabeled.csv\n",
      "/kaggle/input/solana-skill-sprint-memcoin-graduation/train.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_40.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_23.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_18.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_21.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_38.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_37.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_36.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_14.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_6.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_35.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_34.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_32.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_17.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/test_unlabeled.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_8.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_7.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_24.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_41.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_9.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_33.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_26.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_11.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_39.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_10.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_31.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_16.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/dune_token_info_v2.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_4.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_28.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_25.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_22.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_2.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_30.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_19.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_12.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/dune_token_info.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/train.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_29.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_15.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/token_info_onchain_divers_v2.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_1.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_20.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_13.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_27.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_5.csv\n",
      "/kaggle/input/pump-fun-graduation-february-2025/chunk_3.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a645724c",
   "metadata": {
    "collapsed": true,
    "execution": {
     "iopub.execute_input": "2025-07-24T11:13:36.625887Z",
     "iopub.status.busy": "2025-07-24T11:13:36.625461Z",
     "iopub.status.idle": "2025-07-24T11:13:45.362541Z",
     "shell.execute_reply": "2025-07-24T11:13:45.361484Z"
    },
    "jupyter": {
     "outputs_hidden": true
    },
    "papermill": {
     "duration": 8.744436,
     "end_time": "2025-07-24T11:13:45.364229",
     "exception": false,
     "start_time": "2025-07-24T11:13:36.619793",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.11/dist-packages (0.13.0)\r\n",
      "Requirement already satisfied: numpy<3,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.26.4)\r\n",
      "Requirement already satisfied: scipy<2,>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.15.2)\r\n",
      "Collecting scikit-learn<2,>=1.3.2 (from imbalanced-learn)\r\n",
      "  Downloading scikit_learn-1.7.1-cp311-cp311-manylinux2014_x86_64.manylinux_2_17_x86_64.whl.metadata (11 kB)\r\n",
      "Requirement already satisfied: sklearn-compat<1,>=0.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (0.1.3)\r\n",
      "Requirement already satisfied: joblib<2,>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl<4,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (3.6.0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (2025.1.0)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (2022.1.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy<3,>=1.24.3->imbalanced-learn) (2.4.1)\r\n",
      "  Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\r\n",
      "Requirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<3,>=1.24.3->imbalanced-learn) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy<3,>=1.24.3->imbalanced-learn) (2022.1.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy<3,>=1.24.3->imbalanced-learn) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy<3,>=1.24.3->imbalanced-learn) (2024.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy<3,>=1.24.3->imbalanced-learn) (2024.2.0)\r\n",
      "Downloading scikit_learn-1.6.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (13.5 MB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.5/13.5 MB\u001b[0m \u001b[31m78.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: scikit-learn\r\n",
      "  Attempting uninstall: scikit-learn\r\n",
      "    Found existing installation: scikit-learn 1.2.2\r\n",
      "    Uninstalling scikit-learn-1.2.2:\r\n",
      "      Successfully uninstalled scikit-learn-1.2.2\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "category-encoders 2.7.0 requires scikit-learn<1.6.0,>=1.0.0, but you have scikit-learn 1.6.1 which is incompatible.\r\n",
      "bigframes 1.36.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mSuccessfully installed scikit-learn-1.6.1\r\n"
     ]
    }
   ],
   "source": [
    "!pip install --upgrade imbalanced-learn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "942ac6a4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:13:45.377108Z",
     "iopub.status.busy": "2025-07-24T11:13:45.376769Z",
     "iopub.status.idle": "2025-07-24T11:13:45.381693Z",
     "shell.execute_reply": "2025-07-24T11:13:45.380790Z"
    },
    "papermill": {
     "duration": 0.01312,
     "end_time": "2025-07-24T11:13:45.383256",
     "exception": false,
     "start_time": "2025-07-24T11:13:45.370136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "seed=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "de544c60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:13:45.396331Z",
     "iopub.status.busy": "2025-07-24T11:13:45.395302Z",
     "iopub.status.idle": "2025-07-24T11:13:45.399617Z",
     "shell.execute_reply": "2025-07-24T11:13:45.398872Z"
    },
    "papermill": {
     "duration": 0.012183,
     "end_time": "2025-07-24T11:13:45.400998",
     "exception": false,
     "start_time": "2025-07-24T11:13:45.388815",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from tqdm import tqdm\n",
    "# train_chunk_iter = pd.read_csv('/kaggle/input/solana-memecoin-dump-detect/train_clean.csv', chunksize=1000000,\n",
    "#                                engine='python', on_bad_lines='warn')\n",
    "# train_chunks = []\n",
    "# for chunk in tqdm(train_chunk_iter, desc='chunking-----'):\n",
    "#     train_chunks.append(chunk)\n",
    "#     del chunk\n",
    "\n",
    "# train = pd.concat([train_chunks], axis=0)\n",
    "# test = pd.read_csv('/kaggle/input/solana-memecoin-dump-detect/test_clean.csv', low_memory=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4745ad68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:13:45.413299Z",
     "iopub.status.busy": "2025-07-24T11:13:45.413038Z",
     "iopub.status.idle": "2025-07-24T11:14:10.480171Z",
     "shell.execute_reply": "2025-07-24T11:14:10.478825Z"
    },
    "papermill": {
     "duration": 25.075569,
     "end_time": "2025-07-24T11:14:10.481954",
     "exception": false,
     "start_time": "2025-07-24T11:13:45.406385",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import polars as pl\n",
    "\n",
    "train_pl = pl.read_csv('/kaggle/input/solana-memecoin-dump-detect/train_clean.csv')\n",
    "train = train_pl.to_pandas()\n",
    "del train_pl\n",
    "test_pl = pl.read_csv('/kaggle/input/solana-memecoin-dump-detect/test_clean.csv')\n",
    "test = test_pl.to_pandas()\n",
    "del test_pl\n",
    "\n",
    "train_org = pd.read_csv('/kaggle/input/solana-skill-sprint-memcoin-graduation/train.csv')\n",
    "\n",
    "cols_to_drop = ['Unnamed: 0']\n",
    "train.drop(columns=cols_to_drop, inplace=True)\n",
    "test.drop(columns=cols_to_drop, inplace=True)\n",
    "\n",
    "num_cols = ['slot_min', 'is_train', 'decimals', 'slot', 'tx_idx', 'bundle_size', 'amount_of_instructions',\n",
    "           'amount_of_lookup_reads', 'amount_of_lookup_writes', 'bundled_buys', 'bundled_buys_count', 'dev_balance',\n",
    "           'bundled_buys_count', 'dev_balance', 'creation_ix_index', 'pf_program_index', 'direct_pf_invocation', 'total_txs', 'unique_tx_indices',\n",
    "           'unique_wallets', 'buy_count', 'sell_count', 'total_txs_dir', 'buy_ratio', 'unique_buy_wallets', 'unique_sell_wallets', 'base_sum',\n",
    "           'base_mean', 'base_max', 'base_min', 'base_std', 'quote_sum', 'quote_mean', 'quote_max', 'quote_min', 'quote_std', 'activity_duration_sec',\n",
    "           'total_txs_time', 'unique_tx_indices_right', 'unique_wallets_right', 'tx_per_sec', 'first_slot', 'last_slot', 'slot_span', 'early_txs', 'first_balance',\n",
    "           'last_balance', 'first_sol', 'last_sol', 'sol_change', 'balance_volatility', 'max_balance', 'min_balance', 'total_gas_fees', 'avg_gas_fee', \n",
    "           'std_gas_fee', 'max_gas_fee', 'min_gas_fee', 'avg_gas_limit', 'avg_consumed_gas', 'total_consumed_gas', 'total_fee', 'limit_utilization', 'quote_sum_right', 'quote_mean_right',\n",
    "           'quote_max_right', 'quote_min_right', 'quote_std_right', 'fee_per_sol', 'gas_per_tx', 'gas_efficiency', 'liq_virtual_sol_balance_after_mean', \n",
    "           'liq_quote_coin_amount', 'buy_quote_amount', 'sell_quote_amount', 'flow_imbalance', 'gini_coeff', 'top5_wallet_share', 'hour_entropy', 'avg_price',\n",
    "           'price_vol_mean', 'price_vol_max', 'price_slippage', 'tw_base_coin_amount', 'tw_quote_coin_amount', 'coin_age', 'peak_launch', 'created_day', 'created_day_sin', 'created_day_cos',\n",
    "           'created_hour', 'created_hour_sin', 'created_hour_cos', 'created_month', 'created_month_sin', 'created_month_cos', 'block_day', 'block_day_sin', 'block_day_cos', 'block_hour',\n",
    "           'block_hour_sin', 'block_hour_cos', 'block_month', 'block_month_sin', 'block_month_cos', 'nft_actions', 'swap_actions', 'other_actions', 'name_x_hash', 'symbol_x_hash', 'token_uri_hash',\n",
    "           'creator_hash', 'curve_address_hash', 'complexity_ratio', 'pf_program_index_freq', 'creation_ix_index_freq', 'tx_velocity', 'block_saturation', 'total_actions',\n",
    "           'swap_action_ratio', 'gas_per_instruction', 'dev_balance_z', 'gas_z', 'gas_outlier', 'name_length', 'has_meme_keyword', 'creator_grad_rate', 'flow_zscore', 'volatility_ratio', 'vol_zscore',\n",
    "           'depth_ratio', 'slippage_ratio', 'velocity_vs_grads', 'wallet_adoption_vs_grads', 'wallet_growth_rate', 'flow_vs_grads', 'early_adoption_ratio', 'is_meme_token', 'is_tech_token',\n",
    "           'is_pump_token', 'name_uniqueness', 'has_graduated_mean', 'has_graduated_count', 'creator_reputation', 'creator_experience', 'liquidity_strength', 'liquidity_stability',\n",
    "           'buy_pressure', 'liquidity_per_wallet', 'whale_dominance', 'whale_manipulation', 'whale_balance_ratio', 'duration_sec', 'tx_intensity', 'hour_sin_f', 'hour_cos_f', 'minute_sin_f', 'burstiness']\n",
    "obj_dtypes = train.select_dtypes(include=['object','category']).columns\n",
    "num_cols_unique = list(set(num_cols))\n",
    "train[num_cols_unique] = train[num_cols_unique].apply(lambda col: pd.to_numeric(col, errors='coerce')).astype('float32')\n",
    "test[num_cols_unique] = test[num_cols_unique].apply(lambda col: pd.to_numeric(col, errors='coerce')).astype('float32')\n",
    "train[obj_dtypes] = train[obj_dtypes].fillna('missing').astype(str).astype('category')\n",
    "test[obj_dtypes] = test[obj_dtypes].fillna('missing').astype(str).astype('category')\n",
    "train[num_cols_unique] = train[num_cols_unique].fillna(0)\n",
    "test[num_cols_unique] = test[num_cols_unique].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3a27076a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:10.493814Z",
     "iopub.status.busy": "2025-07-24T11:14:10.493518Z",
     "iopub.status.idle": "2025-07-24T11:14:11.844610Z",
     "shell.execute_reply": "2025-07-24T11:14:11.843749Z"
    },
    "papermill": {
     "duration": 1.358901,
     "end_time": "2025-07-24T11:14:11.846323",
     "exception": false,
     "start_time": "2025-07-24T11:14:10.487422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import TimeSeriesSplit, StratifiedKFold\n",
    "from sklearn.metrics import log_loss\n",
    "from sklearn.base import clone\n",
    "\n",
    "def cv_score(X, y, model, n_splits=10, seed=42, verbose=False):\n",
    "    \"\"\"\n",
    "    Performs cross-validation and returns numeric scores\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    X : features DataFrame\n",
    "    y : target Series\n",
    "    model : classifier model\n",
    "    n_splits : number of CV folds\n",
    "    seed : random seed\n",
    "    verbose : whether to print fold scores\n",
    "    \n",
    "    Returns:\n",
    "    --------\n",
    "    List of numeric scores for each fold\n",
    "    \"\"\"\n",
    "    skf = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed)\n",
    "    model_clone = clone(model)\n",
    "    scores = []\n",
    "    \n",
    "    for i, (train_idx, valid_idx) in enumerate(skf.split(X, y), 1):\n",
    "        X_train, X_valid = X.iloc[train_idx], X.iloc[valid_idx]\n",
    "        y_train, y_valid = y.iloc[train_idx], y.iloc[valid_idx]\n",
    "        \n",
    "        model_clone.fit(X_train, y_train)\n",
    "        preds = model_clone.predict_proba(X_valid)[:,1]\n",
    "        score = log_loss(y_valid, preds)\n",
    "        scores.append(score)\n",
    "        \n",
    "        if not verbose:\n",
    "            print(f'fold {i} score :{score}')\n",
    "    mean_score = np.mean(scores)\n",
    "    return mean_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d4deba95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:11.859240Z",
     "iopub.status.busy": "2025-07-24T11:14:11.858761Z",
     "iopub.status.idle": "2025-07-24T11:14:11.863030Z",
     "shell.execute_reply": "2025-07-24T11:14:11.862196Z"
    },
    "papermill": {
     "duration": 0.012254,
     "end_time": "2025-07-24T11:14:11.864342",
     "exception": false,
     "start_time": "2025-07-24T11:14:11.852088",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import lightgbm as lgb\n",
    "# from sklearn.preprocessing import OrdinalEncoder\n",
    "# from sklearn.model_selection import train_test_split\n",
    "# import shap\n",
    "# import warnings\n",
    "\n",
    "# warnings.filterwarnings('ignore')\n",
    "# X = train.copy()\n",
    "# y = train_org['has_graduated']\n",
    "\n",
    "# X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, stratify=y, shuffle=True, random_state=seed)\n",
    "# encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n",
    "# X_train[obj_dtypes] = encoder.fit_transform(X_train[obj_dtypes])\n",
    "# X_valid[obj_dtypes] = encoder.transform(X_valid[obj_dtypes])\n",
    "\n",
    "\n",
    "# lgb = lgb.LGBMClassifier(random_state=seed, verbose=-1)\n",
    "# lgb.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "21a74ff2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:11.877065Z",
     "iopub.status.busy": "2025-07-24T11:14:11.876129Z",
     "iopub.status.idle": "2025-07-24T11:14:11.880352Z",
     "shell.execute_reply": "2025-07-24T11:14:11.879577Z"
    },
    "papermill": {
     "duration": 0.01181,
     "end_time": "2025-07-24T11:14:11.881667",
     "exception": false,
     "start_time": "2025-07-24T11:14:11.869857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# explainer = shap.TreeExplainer(lgb)\n",
    "# shap_values = explainer.shap_values(X_valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7a33031e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:11.893941Z",
     "iopub.status.busy": "2025-07-24T11:14:11.893561Z",
     "iopub.status.idle": "2025-07-24T11:14:11.897445Z",
     "shell.execute_reply": "2025-07-24T11:14:11.896708Z"
    },
    "papermill": {
     "duration": 0.011503,
     "end_time": "2025-07-24T11:14:11.898757",
     "exception": false,
     "start_time": "2025-07-24T11:14:11.887254",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# shap.plots.force(explainer.expected_value[0], shap_values[0], show=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3c80e962",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:11.910581Z",
     "iopub.status.busy": "2025-07-24T11:14:11.910283Z",
     "iopub.status.idle": "2025-07-24T11:14:15.493901Z",
     "shell.execute_reply": "2025-07-24T11:14:15.493006Z"
    },
    "papermill": {
     "duration": 3.591714,
     "end_time": "2025-07-24T11:14:15.495850",
     "exception": false,
     "start_time": "2025-07-24T11:14:11.904136",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train one cardinality features :['is_valid', 'is_train', 'decimals', 'coin_age', 'created_month', 'created_month_sin', 'created_month_cos', 'nft_actions', 'swap_actions', 'other_actions', 'total_actions', 'swap_action_ratio', 'dev_balance_z', 'gas_outlier']\n",
      "\n",
      "test one cardinality features :['is_train', 'early_txs', 'coin_age', 'nft_actions', 'swap_actions', 'other_actions', 'total_actions', 'swap_action_ratio', 'dev_balance_z', 'gas_outlier', 'early_adoption_ratio', 'creator_reputation']\n"
     ]
    }
   ],
   "source": [
    "# pd.reset_option('display.max_rows', None)\n",
    "train_one_cardinality = [col for col in train.columns if train[col].nunique()<2]\n",
    "test_one_cardinality = [col for col in test.columns if test[col].nunique()<2]\n",
    "\n",
    "print(f'train one cardinality features :{train_one_cardinality}\\n')\n",
    "print(f'test one cardinality features :{test_one_cardinality}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "235d757f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:15.510614Z",
     "iopub.status.busy": "2025-07-24T11:14:15.510061Z",
     "iopub.status.idle": "2025-07-24T11:14:16.189680Z",
     "shell.execute_reply": "2025-07-24T11:14:16.188892Z"
    },
    "papermill": {
     "duration": 0.688686,
     "end_time": "2025-07-24T11:14:16.191331",
     "exception": false,
     "start_time": "2025-07-24T11:14:15.502645",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cols_to_drop = ['nft_actions', 'swap_actions', 'other_actions', 'total_actions', 'swap_action_ratio', 'dev_balance_z', 'gas_outlier', \n",
    "                'is_valid', 'is_train', 'decimals', 'bundle_size', 'coin_age', 'created_month', 'created_month_sin', 'created_month_cos', 'block_month',\n",
    "                'block_month_sin', 'block_month_cos']\n",
    "test.drop(columns=cols_to_drop, inplace=True)\n",
    "train.drop(columns=cols_to_drop, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "be4aca93",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:14:16.204250Z",
     "iopub.status.busy": "2025-07-24T11:14:16.203555Z",
     "iopub.status.idle": "2025-07-24T11:38:34.609426Z",
     "shell.execute_reply": "2025-07-24T11:38:34.607934Z"
    },
    "papermill": {
     "duration": 1458.421594,
     "end_time": "2025-07-24T11:38:34.618451",
     "exception": false,
     "start_time": "2025-07-24T11:14:16.196857",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fold 1 score :0.07049238279176843\n",
      "fold 2 score :0.06967166349346322\n",
      "fold 3 score :0.07240049038282333\n",
      "fold 4 score :0.07002457237566134\n",
      "fold 5 score :0.06894536774364626\n",
      "fold 6 score :0.06841920313727115\n",
      "fold 7 score :0.06768136511762435\n",
      "fold 8 score :0.06989686225405457\n",
      "fold 9 score :0.06891558463799609\n",
      "fold 10 score :0.06732810668194741\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier(colsample_bytree=0.7, device=&#x27;cpu&#x27;, learning_rate=0.01,\n",
       "               max_depth=10, metric=&#x27;logloss&#x27;, n_estimators=1700, n_jobs=-1,\n",
       "               objective=&#x27;binary&#x27;, random_state=1, reg_alpha=0.1,\n",
       "               reg_lambda=0.1, subsample=0.7, verbose=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LGBMClassifier</div></div><div><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LGBMClassifier(colsample_bytree=0.7, device=&#x27;cpu&#x27;, learning_rate=0.01,\n",
       "               max_depth=10, metric=&#x27;logloss&#x27;, n_estimators=1700, n_jobs=-1,\n",
       "               objective=&#x27;binary&#x27;, random_state=1, reg_alpha=0.1,\n",
       "               reg_lambda=0.1, subsample=0.7, verbose=-1)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LGBMClassifier(colsample_bytree=0.7, device='cpu', learning_rate=0.01,\n",
       "               max_depth=10, metric='logloss', n_estimators=1700, n_jobs=-1,\n",
       "               objective='binary', random_state=1, reg_alpha=0.1,\n",
       "               reg_lambda=0.1, subsample=0.7, verbose=-1)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import warnings\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "X = train.copy()\n",
    "y = train_org['has_graduated']\n",
    "x_obj_cols = X.select_dtypes(include=['object', 'category']).columns\n",
    "\n",
    "original_counts = y.value_counts()\n",
    "minority_class = original_counts.idxmin()\n",
    "majority_class = original_counts.idxmax()\n",
    "minority_count = original_counts[minority_class]\n",
    "majority_count = original_counts[majority_class]\n",
    "\n",
    "desired_majority_minority_ratio = 40.0\n",
    "desired_majority_count = int(minority_count * desired_majority_minority_ratio)\n",
    "desired_majority_count = min(desired_majority_count, majority_count)\n",
    "\n",
    "sampling_strategy_dict = {\n",
    "    minority_class:minority_count,\n",
    "    majority_class:desired_majority_count\n",
    "}\n",
    "\n",
    "rus = RandomUnderSampler(random_state=seed, sampling_strategy=sampling_strategy_dict)\n",
    "X_resampled, y_resampled = rus.fit_resample(X, y)\n",
    "\n",
    "lgb_params = {\n",
    "        'objective': 'binary',\n",
    "        'metric': 'logloss',\n",
    "        'boosting_type': 'gbdt',\n",
    "        'device': 'cpu',\n",
    "        'n_estimators': 1700, # High number, use early stopping\n",
    "        'learning_rate': 0.01,\n",
    "        'num_leaves': 31, # Adjust based on data complexity\n",
    "        'max_depth': 10, # No limit\n",
    "        # 'seed': RANDOM_SEED + fold,\n",
    "        'n_jobs': -1,\n",
    "        'verbose': -1,\n",
    "        'colsample_bytree': 0.7,\n",
    "        'subsample': 0.7,\n",
    "        'reg_alpha': 0.1,\n",
    "        'reg_lambda': 0.1,\n",
    "    }\n",
    "\n",
    "# X[obj_dtypes] = X[obj_dtypes].astype(str).fillna('missing').astype(str).astype('category')\n",
    "# num_dtypes = X.select_dtypes(include=['float32']).columns\n",
    "# X[num_dtypes] = X[num_dtypes].fillna(0)\n",
    "# lr = LogisticRegression(random_state=seed)\n",
    "lgb = lgb.LGBMClassifier(random_state=seed, **lgb_params)\n",
    "cv_score(X_resampled, y_resampled, lgb, verbose=False)\n",
    "lgb.fit(X_resampled, y_resampled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3fb5687c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:38:34.635801Z",
     "iopub.status.busy": "2025-07-24T11:38:34.633872Z",
     "iopub.status.idle": "2025-07-24T11:39:58.233582Z",
     "shell.execute_reply": "2025-07-24T11:39:58.232602Z"
    },
    "papermill": {
     "duration": 83.610155,
     "end_time": "2025-07-24T11:39:58.235573",
     "exception": false,
     "start_time": "2025-07-24T11:38:34.625418",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(303564, 144)\n"
     ]
    }
   ],
   "source": [
    "print(X_resampled.shape)\n",
    "subm_df = pd.read_csv('/kaggle/input/solana-skill-sprint-memcoin-graduation/sample_submission.csv')\n",
    "preds = lgb.predict_proba(test)[:,1]\n",
    "subm_df['has_graduated'] = preds\n",
    "subm_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9319e588",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.250658Z",
     "iopub.status.busy": "2025-07-24T11:39:58.250356Z",
     "iopub.status.idle": "2025-07-24T11:39:58.254808Z",
     "shell.execute_reply": "2025-07-24T11:39:58.253926Z"
    },
    "papermill": {
     "duration": 0.013581,
     "end_time": "2025-07-24T11:39:58.256360",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.242779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_resampled[x_obj_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5d723845",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.271214Z",
     "iopub.status.busy": "2025-07-24T11:39:58.270910Z",
     "iopub.status.idle": "2025-07-24T11:39:58.276422Z",
     "shell.execute_reply": "2025-07-24T11:39:58.275696Z"
    },
    "papermill": {
     "duration": 0.014512,
     "end_time": "2025-07-24T11:39:58.277657",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.263145",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import optuna\n",
    "# from lightgbm import LGBMClassifier\n",
    "# import numpy as np\n",
    "# import time\n",
    "\n",
    "# def objective(trial, X, y, seed=42):\n",
    "#     \"\"\"\n",
    "#     Objective function for Optuna optimization\n",
    "#     \"\"\"\n",
    "#     # Handle boosting type constraints first\n",
    "#     boosting_type = trial.suggest_categorical('boosting_type', ['gbdt'])\n",
    "    \n",
    "#     # Conditional parameters based on boosting type\n",
    "#     subsample, subsample_freq = 1.0, 0\n",
    "#     if boosting_type != 'goss':\n",
    "#         subsample = trial.suggest_float('subsample', 0.4, 1.0, step=0.05)\n",
    "#         subsample_freq = trial.suggest_int('subsample_freq', 0, 7)\n",
    "\n",
    "#     params = {\n",
    "#         'objective': 'binary',\n",
    "#         'boosting_type': boosting_type,\n",
    "#         'num_leaves': trial.suggest_int('num_leaves', 15, 255, step=5),\n",
    "#         # 'max_bin': 63,  # Valid GPU bin sizes (63, 127, 255)\n",
    "#         'max_depth': trial.suggest_int('max_depth', 3, 25),\n",
    "#         'min_child_samples': trial.suggest_int('min_child_samples', 1, 200, step=5),\n",
    "#         'min_child_weight': trial.suggest_float('min_child_weight', 1e-6, 1e2, log=True),\n",
    "#         'subsample': subsample,\n",
    "#         'subsample_freq': subsample_freq,\n",
    "#         'colsample_bytree': trial.suggest_float('colsample_bytree', 0.1, 1.0, step=0.05),\n",
    "#         'reg_alpha': trial.suggest_float('reg_alpha', 1e-9, 50.0, log=True),\n",
    "#         'reg_lambda': trial.suggest_float('reg_lambda', 1e-9, 50.0, log=True),\n",
    "#         'min_split_gain': trial.suggest_float('min_split_gain', 0.0, 1.0),\n",
    "#         'learning_rate': trial.suggest_float('learning_rate', 0.001, 0.3, log=True),\n",
    "#         'n_estimators': trial.suggest_int('n_estimators', 500, 10000, step=50),\n",
    "        \n",
    "#         # Class imbalance parameters\n",
    "#         'scale_pos_weight': trial.suggest_float('scale_pos_weight', 1.0, 20.0),\n",
    "        \n",
    "#         # Regularization\n",
    "#         'path_smooth': trial.suggest_float('path_smooth', 0.0, 200.0),\n",
    "        \n",
    "#         # System params\n",
    "#         'random_state': seed,\n",
    "#         'n_jobs': -1,\n",
    "#         'verbosity': -1,\n",
    "#         'device_type': 'cpu',  # Enable GPU usage\n",
    "#         # 'gpu_platform_id': 0,\n",
    "#         # 'gpu_device_id': 0\n",
    "#     }\n",
    "\n",
    "#     model = LGBMClassifier(**params)\n",
    "    \n",
    "#     # Calculate and return the mean of CV scores\n",
    "#     # Note we're not printing results for each fold during optimization\n",
    "#     scores = cv_score(X, y, model, n_splits=5, seed=seed, verbose=False)\n",
    "#     return np.mean(scores)\n",
    "\n",
    "# def optimize_lightgbm(X, y, n_trials=200, seed=42):\n",
    "#     \"\"\"\n",
    "#     Run the full optimization process\n",
    "    \n",
    "#     Parameters:\n",
    "#     -----------\n",
    "#     X : features DataFrame\n",
    "#     y : target Series\n",
    "#     n_trials : number of Optuna trials\n",
    "#     seed : random seed\n",
    "    \n",
    "#     Returns:\n",
    "#     --------\n",
    "#     Optuna study object\n",
    "#     \"\"\"\n",
    "#     study = optuna.create_study(\n",
    "#         direction='minimize',  # We're minimizing log loss\n",
    "#         sampler=optuna.samplers.TPESampler(seed=seed),\n",
    "#         pruner=optuna.pruners.HyperbandPruner()\n",
    "#     )\n",
    "    \n",
    "#     start_time = time.time()\n",
    "    \n",
    "#     study.optimize(\n",
    "#         lambda trial: objective(trial, X, y, seed), \n",
    "#         n_trials=n_trials,\n",
    "#         show_progress_bar=True,\n",
    "#         gc_after_trial=True\n",
    "#     )\n",
    "    \n",
    "#     elapsed_time = time.time() - start_time\n",
    "    \n",
    "#     # Print results\n",
    "#     print(f\"Optimization completed in {elapsed_time:.2f} seconds\")\n",
    "#     print(\"\\nBest trial:\")\n",
    "#     trial = study.best_trial\n",
    "#     print(f\"Value: {trial.value}\")\n",
    "#     print(\"Params:\")\n",
    "#     for key, value in trial.params.items():\n",
    "#         print(f\"    {key}: {value}\")\n",
    "    \n",
    "#     return study\n",
    "\n",
    "# # Example usage:\n",
    "# study = optimize_lightgbm(X_resampled, y_resampled, n_trials=200, seed=42)\n",
    "\n",
    "# print(\"Best trial:\")\n",
    "# trial = study.best_trial\n",
    "# print(f\"Value: {trial.value}\")\n",
    "# print(\"Params:\")\n",
    "# for key, value in trial.params.items():\n",
    "#     print(f\"    {key}: {value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9030a021",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.292157Z",
     "iopub.status.busy": "2025-07-24T11:39:58.291787Z",
     "iopub.status.idle": "2025-07-24T11:39:58.295606Z",
     "shell.execute_reply": "2025-07-24T11:39:58.294907Z"
    },
    "papermill": {
     "duration": 0.012707,
     "end_time": "2025-07-24T11:39:58.296968",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.284261",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# X_resampled.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c7cf9aeb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.311551Z",
     "iopub.status.busy": "2025-07-24T11:39:58.311249Z",
     "iopub.status.idle": "2025-07-24T11:39:58.315818Z",
     "shell.execute_reply": "2025-07-24T11:39:58.315140Z"
    },
    "papermill": {
     "duration": 0.013408,
     "end_time": "2025-07-24T11:39:58.317059",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.303651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# from sklearn.feature_selection import RFECV\n",
    "# from sklearn.metrics import make_scorer, recall_score\n",
    "\n",
    "# def feature_selection(X, y, model, n_splits=10, step=1, seed=seed):\n",
    "#     estimator = clone(model)\n",
    "    \n",
    "#     # Custom scorer that explicitly uses only positive class probabilities\n",
    "#     def custom_log_loss(y_true, y_pred):\n",
    "#         # If y_pred is a 2D array of probabilities for all classes\n",
    "#         if len(y_pred.shape) > 1 and y_pred.shape[1] > 1:\n",
    "#             # Extract only the probability for positive class (class 1)\n",
    "#             y_pred = y_pred[:, 1]\n",
    "#         return -log_loss(y_true, y_pred)\n",
    "    \n",
    "#     # Create a scorer with needs_proba=True to get probabilities\n",
    "#     custom_scorer = make_scorer(\n",
    "#         custom_log_loss,\n",
    "#         needs_proba=True,\n",
    "#         greater_is_better=False  # Lower is better for log loss\n",
    "#     )\n",
    "    \n",
    "#     rfecv = RFECV(\n",
    "#         estimator=estimator,\n",
    "#         step=step,\n",
    "#         cv=StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=seed),\n",
    "#         scoring=custom_scorer\n",
    "#     )\n",
    "    \n",
    "#     rfecv.fit(X, y)\n",
    "#     best_features = X.columns[rfecv.support_].tolist()\n",
    "    \n",
    "#     # Lower is better for log loss\n",
    "#     best_score = min(rfecv.cv_results_['mean_test_score'])\n",
    "    \n",
    "#     # Return the absolute value of the score since we negated it in the scorer\n",
    "#     return -best_score, best_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d9279a58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.331646Z",
     "iopub.status.busy": "2025-07-24T11:39:58.331373Z",
     "iopub.status.idle": "2025-07-24T11:39:58.335642Z",
     "shell.execute_reply": "2025-07-24T11:39:58.334749Z"
    },
    "papermill": {
     "duration": 0.013296,
     "end_time": "2025-07-24T11:39:58.337122",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.323826",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import lightgbm as lgb\n",
    "# from sklearn.preprocessing import OrdinalEncoder\n",
    "# import warnings\n",
    "\n",
    "# warnings.filterwarnings('ignore')\n",
    "# X = train.copy()\n",
    "# y = train_org['has_graduated']\n",
    "# encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n",
    "# X[obj_dtypes] = encoder.fit_transform(X[obj_dtypes])\n",
    "\n",
    "# lgb = lgb.LGBMClassifier(device='gpu', random_state=seed, verbose=-1)\n",
    "# best_lgb_score, best_lgb_features = feature_selection(X, y, lgb, n_splits=10, step=1, seed=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "681cffc2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.351828Z",
     "iopub.status.busy": "2025-07-24T11:39:58.351485Z",
     "iopub.status.idle": "2025-07-24T11:39:58.355668Z",
     "shell.execute_reply": "2025-07-24T11:39:58.354854Z"
    },
    "papermill": {
     "duration": 0.013208,
     "end_time": "2025-07-24T11:39:58.357086",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.343878",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best lgbm score :{best_lgb_score}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a74fed6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.371775Z",
     "iopub.status.busy": "2025-07-24T11:39:58.371491Z",
     "iopub.status.idle": "2025-07-24T11:39:58.375787Z",
     "shell.execute_reply": "2025-07-24T11:39:58.374912Z"
    },
    "papermill": {
     "duration": 0.01349,
     "end_time": "2025-07-24T11:39:58.377308",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.363818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best lgbm features :{best_lgb_features}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6322d109",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.392212Z",
     "iopub.status.busy": "2025-07-24T11:39:58.391927Z",
     "iopub.status.idle": "2025-07-24T11:39:58.396236Z",
     "shell.execute_reply": "2025-07-24T11:39:58.395344Z"
    },
    "papermill": {
     "duration": 0.013304,
     "end_time": "2025-07-24T11:39:58.397664",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.384360",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import xgboost as xgb\n",
    "# from sklearn.preprocessing import OrdinalEncoder\n",
    "# import warnings\n",
    "# warnings.filterwarnings('ignore')\n",
    "\n",
    "# X = train.copy()\n",
    "# y = train_org['has_graduated']\n",
    "# encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n",
    "# X[obj_dtypes] = encoder.fit_transform(X[obj_dtypes])\n",
    "\n",
    "# xgb_clf = xgb.XGBClassifier(tree_method='gpu_hist', random_state=seed, verbose=-1)\n",
    "# best_xgb_score, best_xgb_features = feature_selection(X, y, xgb_clf, n_splits=10, step=1, seed=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "970ef852",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.533912Z",
     "iopub.status.busy": "2025-07-24T11:39:58.533521Z",
     "iopub.status.idle": "2025-07-24T11:39:58.537778Z",
     "shell.execute_reply": "2025-07-24T11:39:58.536816Z"
    },
    "papermill": {
     "duration": 0.134836,
     "end_time": "2025-07-24T11:39:58.539285",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.404449",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best xgb score :{best_xgb_score}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "4c5d62ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.554281Z",
     "iopub.status.busy": "2025-07-24T11:39:58.553971Z",
     "iopub.status.idle": "2025-07-24T11:39:58.558003Z",
     "shell.execute_reply": "2025-07-24T11:39:58.557174Z"
    },
    "papermill": {
     "duration": 0.013154,
     "end_time": "2025-07-24T11:39:58.559354",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.546200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best xgb features :{best_xgb_features}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0daa4464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.574548Z",
     "iopub.status.busy": "2025-07-24T11:39:58.574239Z",
     "iopub.status.idle": "2025-07-24T11:39:58.578174Z",
     "shell.execute_reply": "2025-07-24T11:39:58.577446Z"
    },
    "papermill": {
     "duration": 0.013122,
     "end_time": "2025-07-24T11:39:58.579479",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.566357",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import catboost as cb\n",
    "# from sklearn.preprocessing import OrdinalEncoder\n",
    "\n",
    "# X = train.copy()\n",
    "# y = train_org['has_graduated']\n",
    "# encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\n",
    "# X[obj_dtypes] = encoder.fit_transform(X[obj_dtypes])\n",
    "\n",
    "# cat = cb.CatBoostClassifier( random_state=seed, verbose=0)\n",
    "# best_cat_score, best_cat_features = feature_selection(X, y, cat, n_splits=20, step=1, seed=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "e27810fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.594761Z",
     "iopub.status.busy": "2025-07-24T11:39:58.594439Z",
     "iopub.status.idle": "2025-07-24T11:39:58.598414Z",
     "shell.execute_reply": "2025-07-24T11:39:58.597583Z"
    },
    "papermill": {
     "duration": 0.013408,
     "end_time": "2025-07-24T11:39:58.599910",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.586502",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best cat score :{best_cat_score}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "34f4eef5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-24T11:39:58.615515Z",
     "iopub.status.busy": "2025-07-24T11:39:58.615184Z",
     "iopub.status.idle": "2025-07-24T11:39:58.619283Z",
     "shell.execute_reply": "2025-07-24T11:39:58.618530Z"
    },
    "papermill": {
     "duration": 0.013636,
     "end_time": "2025-07-24T11:39:58.620763",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.607127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# print(f'best cat features :{best_cat_features}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d8512bf2",
   "metadata": {
    "papermill": {
     "duration": 0.006668,
     "end_time": "2025-07-24T11:39:58.634453",
     "exception": false,
     "start_time": "2025-07-24T11:39:58.627785",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 11856763,
     "sourceId": 97569,
     "sourceType": "competition"
    },
    {
     "datasetId": 7012766,
     "sourceId": 11407081,
     "sourceType": "datasetVersion"
    },
    {
     "sourceId": 235472740,
     "sourceType": "kernelVersion"
    }
   ],
   "dockerImageVersionId": 31012,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1590.688944,
   "end_time": "2025-07-24T11:40:00.265722",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-24T11:13:29.576778",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
